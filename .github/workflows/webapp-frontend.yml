name: Webapp frontend

on:
  workflow_call:
    inputs:
      name:
        description: Application name. Used as base to the various artifacts.
        required: true
        type: string
      checks:
        description: |
          List of enabled check separated by comma.
          default: eslint,stylelint,unit_tests,lint_dockerfiles
          available checks: eslint,stylelint,unit_tests,lint_dockerfiles
        required: false
        default: "eslint,stylelint,unit_tests,lint_dockerfiles"
        type: string
      docker-context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context.
        required: false
        type: string
        default: ""
      generate-sdk:
        description: |
          `true` if this project should generate an openapi SDK for the frontend
        required: false
        type: boolean
        default: true
      image-name:
        description: Specify a different docker image name. By default the image name is computed from the name.
        required: false
        type: string
        default: ""
      platforms:
        description: "List of platforms to build"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      publish-image:
        description: |
          Set to `true` to enable Docker image publication. This will typically only be `false` until the ECR repository is created.
          Defaults to true.
        required: false
        default: true
        type: boolean
      slack-channel:
        description: |
          The Slack channel where the notification will be sent.
          Defaults to $ {{ github.event.repository.custom_properties.ci_slack_channel }}.
        required: false
        type: string
      workflow-path:
        description: Workflow file used for change detection.
        default: .github/workflows/webapp-frontend.yml
        required: false
        type: string
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located.
        type: string
        required: false
        default: "."
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      ECR_REGISTRY:
        description: The AWS ECR registry where the image will be pushed to.
        required: true
      ECR_AWS_ACCESS_KEY_ID:
        description: An AWS access key ID that has write permissions to the registry.
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        description: An AWS secret access key that has write permissions to the registry.
        required: true
      ECR_AWS_REGION:
        description: AWS region for the registry.
        required: true
      SLACK_BOT_TOKEN:
        description: The bot token used to authenticate with Slack.
        required: true
    outputs:
      image-tag:
        description: Tag of built Docker image (without repository)
        value: ${{ jobs.image.outputs.image-tag }}

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}

    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content
          do_not_skip: >-
            [
              "push",
              "schedule",
              "workflow_dispatch"
            ]
          paths: >-
            [
              ".tool-versions",
              "${{ inputs.workflow-path }}",
              "${{ inputs.working-directory }}/**",
              "backend/bff/src/main/**/interfaces/http/rest/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs:
      - pre_checks
    if: ${{ needs.pre_checks.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      name: ${{ inputs.name }}
      docker-context: ${{ steps.variables.outputs.docker-context }}
      image-name: ${{ steps.variables.outputs.image-name }}
      is-release: ${{ steps.metadata.outputs.is-release }}
      publishable: ${{ steps.metadata.outputs.publishable }}
      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find application metadata
        id: metadata
        uses: equisoft-actions/application-metadata@v1
        with:
          hotfix-branch-prefix: release/

      - name: Compute variables
        id: variables
        shell: bash
        run: |
          BASE_NAME=${{ inputs.name }}
          FULL_NAME=${BASE_NAME}-frontend

          IMAGE_NAME=${{ inputs.image-name }}
          if [[ "$IMAGE_NAME" == "" ]]; then
            IMAGE_NAME="$FULL_NAME"
          fi

          DOCKER_CONTEXT=${{ inputs.docker-context }}
          if [[ "$DOCKER_CONTEXT" == "" ]]; then
            DOCKER_CONTEXT="${{ inputs.working-directory }}"
          fi

          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "docker-context=${DOCKER_CONTEXT}" >> $GITHUB_OUTPUT

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Generate SDK
        uses: equisoft-actions/generate-openapi-sdk@v2
        if: inputs.generate-sdk
        with:
          working-directory: backend
          gradle-project-path: bff
          generator-name: typescript
          publish: false
          gradle-properties: |
            application.version=${{ steps.metadata.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Store SDK output
        uses: actions/upload-artifact@v4
        if: success() && inputs.generate-sdk
        with:
          name: sdk_output
          path: backend/bff/sdk/
          retention-days: 1
          if-no-files-found: error

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'eslint')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run ESLint
        uses: equisoft-actions/yarn-eslint@v2
        with:
          working-directory: ${{ inputs.working-directory }}

  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'stylelint')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Stylelint
        uses: equisoft-actions/yarn-stylelint@v1
        with:
          working-directory: ${{ inputs.working-directory }}

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'unit_tests')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Jest
        uses: equisoft-actions/yarn-jest@v1
        with:
          working-directory: ${{ inputs.working-directory }}

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Compile
        working-directory: ${{ inputs.working-directory }}
        run: yarn build:production

  lint_dockerfiles:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs: [pre_checks]
    if: contains(inputs.checks, 'lint_dockerfiles')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate Dockerfile
        uses: equisoft-actions/hadolint@v1
        with:
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          working-directory: ${{ inputs.working-directory }}

  image:
    name: Build image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.output-pushed-image.outputs.image-tag }}
    needs:
      - setup
      - eslint
      - stylelint
      - unit_tests
      - lint_dockerfiles
    if: |
      needs.setup.outputs.publishable == 'true' &&
      !failure() &&
      !cancelled() &&
      (!contains(inputs.checks, 'eslint') || success('eslint')) &&
      (!contains(inputs.checks, 'stylelint') || success('stylelint')) &&
      (!contains(inputs.checks, 'unit_tests') || success('unit_tests')) &&
      (!contains(inputs.checks, 'lint_dockerfiles') || success('lint_dockerfiles'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine platforms to build
        id: platforms
        shell: bash
        run: |
          if [[ "${{ needs.setup.outputs.is-release }}" == "true" ]]; then
            PLATFORMS="linux/amd64"
          else
            PLATFORMS=${{ inputs.platforms }}
          fi
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build-and-push
        uses: equisoft-actions/docker-build-and-push@v2
        with:
          registry: ${{ secrets.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          build-args: |
            APPLICATION_VERSION=${{ needs.setup.outputs.version }}
            GPR_USER=${{ secrets.GPR_USER }}
            GPR_KEY=${{ secrets.GPR_KEY }}
          context: ${{ needs.setup.outputs.docker-context }}
          name: ${{ needs.setup.outputs.image-name }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ inputs.publish-image }}
          is-release: ${{ needs.setup.outputs.is-release }}
          version: ${{ needs.setup.outputs.version }}
          working-directory: ${{ inputs.working-directory }}

      - name: Output pushed image tag
        id: output-pushed-image
        if: inputs.publish-image
        shell: bash
        run: |
          echo "image-tag=${{ needs.setup.outputs.image-name }}:${{ steps.build-and-push.outputs.image-version }}" >> $GITHUB_OUTPUT

  docker-security:
    uses: equisoft-actions/docker-workflows/.github/workflows/security.yml@v2
    if: |
      !failure() &&
      !cancelled() &&
      success('image') &&
      inputs.publish-image
    needs:
      - image
    with:
      image-tag: ${{ needs.image.outputs.image-tag }}
      working-directory: ${{ inputs.working-directory }}
    secrets:
      REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
      ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
      ECR_AWS_REGION: ${{ secrets.ECR_AWS_REGION }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - pre_checks
      - setup
      - eslint
      - stylelint
      - unit_tests
      - compile
      - lint_dockerfiles
      - image
      - docker-security
    if: always() && needs.setup.outputs.publishable == 'true'

    steps:
      - name: Post workflow status
        uses: equisoft-actions/notify-workflow-status@dev/customize_channel
        with:
          needs: ${{ toJSON(needs) }}
          downgrade-to-warning: docker-security,generate_sdk
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel: ${{ inputs.slack-channel || github.event.repository.custom_properties.ci_slack_channel }}

