name: Webapp frontend

on:
  workflow_call:
    inputs:
      name:
        description: Application name. Used as base to the various artifacts.
        required: true
        type: string
      checks:
        description: |
          List of enabled check separated by comma.
          default: eslint,stylelint,unit_tests,lint_dockerfiles
          available checks: eslint,stylelint,unit_tests,lint_dockerfiles
        required: false
        default: "eslint,stylelint,unit_tests,lint_dockerfiles"
        type: string
      backend-working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the backend project is located.
        required: false
        type: string
        default: "backend"
      backend-gradle-project-path:
        description: Gradle project path for the backend project.
        required: false
        type: string
        default: "bff"
      build-path:
        default: "dist/"
        description: Path where the frontend artifacts are written
        required: false
        type: string
      docker-context:
        description: Relative path under $GITHUB_WORKSPACE for the Docker context.
        required: false
        type: string
        default: ""
      generate-sdk:
        description: |
          `true` if this project should generate an openapi SDK for the frontend
        required: false
        type: boolean
        default: true
      image-name:
        description: Specify a different docker image name. By default the image name is computed from the name.
        required: false
        type: string
        default: ""
      microfrontend-name:
        description: |
          Name of the microfrontend. If set, the project will be built as a microfrontend.
          This will also set GENERATE_MF_TYPES to true.
        required: false
        type: string
        default: ""
      microfrontend-types-path:
        description: |
          Path where the microfrontend types are written.
          This is only used if `microfrontend-name` is set.
        required: false
        type: string
        default: "build"
      platforms:
        description: "List of platforms to build"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      publish-image:
        description: |
          Set to `true` to enable Docker image publication. This will typically only be `false` until the ECR repository is created.
          Defaults to true.
        required: false
        default: true
        type: boolean
      pull:
        description: Always attempt to pull all referenced images
        type: boolean
        required: false
        default: false
      registry:
        description: The Docker registry to use for publishing images.
        required: true
        type: string
      sdk-output-path:
        description: Path where the generated SDK will be stored.
        required: false
        type: string
        default: "backend/bff/sdk/"
      slack-channel:
        description: |
          The Slack channel where the notification will be sent.
          Defaults to $ {{ github.event.repository.custom_properties.ci_slack_channel }}.
        required: false
        type: string
      workflow-path:
        description: Workflow file used for change detection.
        default: .github/workflows/webapp-frontend.yml
        required: false
        type: string
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located.
        type: string
        required: false
        default: "."
      instance-size:
        description: Instance size for self-hosted runners.
        required: false
        type: string
        default: "large"
      use-self-hosted:
        description: Whether to use self-hosted runners.
        required: false
        type: boolean
        default: false
      role-to-assume:
        description: AWS role to assume for ECR access.
        required: false
        type: string
        default: ""
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      ECR_AWS_REGION:
        description: AWS region for the registry.
        required: true
      SLACK_BOT_TOKEN:
        description: The bot token used to authenticate with Slack.
        required: true
    outputs:
      image-tag:
        description: Tag of built Docker image (without repository)
        value: ${{ jobs.create-manifest.outputs.image-version }}
      version:
        description: The computed version tag generated by this workflow
        value: ${{ jobs.setup.outputs.version }}

permissions:
  actions: read
  contents: write
  id-token: write
  security-events: write

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}

    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: same_content
          do_not_skip: >-
            [
              "push",
              "schedule",
              "workflow_dispatch"
            ]
          paths: >-
            [
              ".tool-versions",
              "${{ inputs.workflow-path }}",
              "${{ inputs.working-directory }}/**",
              "${{ inputs.backend-working-directory }}/${{ inputs.backend-gradle-project-path }}/src/main/**/interfaces/http/rest/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs:
      - pre_checks
    if: ${{ needs.pre_checks.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      name: ${{ inputs.name }}
      docker-context: ${{ steps.variables.outputs.docker-context }}
      image-name: ${{ steps.variables.outputs.image-name }}
      is-microfrontend: ${{ steps.variables.outputs.is-microfrontend }}
      is-release: ${{ steps.metadata.outputs.is-release }}
      microfrontend-types-path: ${{ inputs.working-directory }}/${{ inputs.microfrontend-types-path }}/${{ inputs.microfrontend-name }}/
      publishable: ${{ steps.variables.outputs.publishable }}


      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find application metadata
        id: metadata
        uses: equisoft-actions/application-metadata@v1
        with:
          hotfix-branch-prefix: release/

      - name: Compute variables
        id: variables
        shell: bash
        run: |
          # for testing only
          echo "publishable=true" >> $GITHUB_OUTPUT

          BASE_NAME=${{ inputs.name }}
          FULL_NAME=${BASE_NAME}-frontend

          IMAGE_NAME=${{ inputs.image-name }}
          if [[ "$IMAGE_NAME" == "" ]]; then
            IMAGE_NAME="$FULL_NAME"
          fi

          DOCKER_CONTEXT=${{ inputs.docker-context }}
          if [[ "$DOCKER_CONTEXT" == "" ]]; then
            DOCKER_CONTEXT="${{ inputs.working-directory }}"
          fi

          IS_MICROFRONTEND="false"
          if [[ "${{ inputs.microfrontend-name }}" != "" ]]; then
              IS_MICROFRONTEND="true"
          fi

          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "docker-context=${DOCKER_CONTEXT}" >> $GITHUB_OUTPUT
          echo "is-microfrontend=${IS_MICROFRONTEND}" >> $GITHUB_OUTPUT

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Generate SDK
        uses: equisoft-actions/generate-openapi-sdk@v2
        if: inputs.generate-sdk
        with:
          working-directory: ${{ inputs.backend-working-directory }}
          gradle-project-path: ${{ inputs.backend-gradle-project-path }}
          generator-name: typescript
          publish: false
          gradle-properties: |
            application.version=${{ steps.metadata.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Store SDK output
        uses: actions/upload-artifact@v4
        if: success() && inputs.generate-sdk
        with:
          name: sdk_output
          path: ${{ inputs.sdk-output-path }}
          retention-days: 1
          if-no-files-found: error

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'eslint')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: ${{ inputs.sdk-output-path }}

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run ESLint
        uses: equisoft-actions/yarn-eslint@v2
        with:
          working-directory: ${{ inputs.working-directory }}

  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'stylelint')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: ${{ inputs.sdk-output-path }}

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Stylelint
        uses: equisoft-actions/yarn-stylelint@v1
        with:
          working-directory: ${{ inputs.working-directory }}

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs:
      - setup
    if: contains(inputs.checks, 'unit_tests')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: ${{ inputs.sdk-output-path }}

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Jest
        uses: equisoft-actions/yarn-jest@v2
        with:
          working-directory: ${{ inputs.working-directory }}

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download SDK output
        uses: actions/download-artifact@v4
        if: inputs.generate-sdk
        with:
          name: sdk_output
          path: ${{ inputs.sdk-output-path }}

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - name: Determine node linker
        id: node-linker
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [[ "${{ needs.setup.outputs.is-microfrontend }}" == "true" ]]; then
            LINKER="node-modules"
          else
            LINKER=$(yarn config get nodeLinker)
          fi

          echo "node-linker=${LINKER}" >> $GITHUB_OUTPUT

      - name: Install NPM dependencies
        uses: equisoft-actions/yarn-install@v1
        env:
          YARN_NODE_LINKER: ${{ steps.node-linker.outputs.node-linker }}
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Compile
        working-directory: ${{ inputs.working-directory }}
        env:
          APPLICATION_VERSION: ${{ needs.setup.outputs.version }}
          GENERATE_MF_TYPES: ${{ needs.setup.outputs.is-microfrontend == 'true' }}
          YARN_NODE_LINKER: ${{ steps.node-linker.outputs.node-linker }}
        run: |
          jq '.version = "${{ needs.setup.outputs.version }}"' package.json > package.json$
          mv package.json$ package.json
          yarn build:production

      - name: Store microfrontend types
        if: needs.setup.outputs.is-microfrontend == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mf-types
          path: ${{ needs.setup.outputs.microfrontend-types-path }}
          retention-days: 1
          if-no-files-found: error

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapp-dist
          path: ${{ inputs.working-directory }}/${{ inputs.build-path }}
          retention-days: 1
          if-no-files-found: error

  lint_dockerfiles:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs: [pre_checks]
    if: contains(inputs.checks, 'lint_dockerfiles')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate Dockerfile
        uses: equisoft-actions/hadolint@v1
        with:
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          working-directory: ${{ inputs.working-directory }}

  publish_mf_types:
    name: Publish microfrontend types
    runs-on: ubuntu-latest
    needs:
      - setup
      - compile
      - eslint
      - stylelint
      - unit_tests
      - lint_dockerfiles
    if: |
      needs.setup.outputs.publishable == 'true' &&
      needs.setup.outputs.is-microfrontend == 'true' &&
      !failure() &&
      !cancelled() &&
      (!contains(inputs.checks, 'compile') || needs.compile.result == 'success') &&
      (!contains(inputs.checks, 'eslint') || needs.eslint.result == 'success') &&
      (!contains(inputs.checks, 'stylelint') || needs.stylelint.result == 'success') &&
      (!contains(inputs.checks, 'unit_tests') || needs.unit_tests.result == 'success') &&
      (!contains(inputs.checks, 'lint_dockerfiles') || needs.lint_dockerfiles.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup asdf-vm
        uses: equisoft-actions/with-asdf-vm@v2

      - name: Download microfrontend types
        uses: actions/download-artifact@v4
        with:
          name: mf-types
          path: ${{ needs.setup.outputs.microfrontend-types-path }}

      - name: NPM login to GitHub Packages
        uses: equisoft-actions/yarn-npm-login@v1
        with:
          registry: npm.pkg.github.com
          token: ${{ secrets.GPR_KEY }}

      - uses: equisoft-actions/nodejs-application-metadata@v1
        id: metadata
        with:
          hotfix-branch-prefix: release/

      - name: Publish microfrontend types
        shell: bash
        working-directory: ${{ needs.setup.outputs.microfrontend-types-path }}
        run: |
          jq '.version = "${{ steps.metadata.outputs.version }}"' package.json > package.json$
          mv package.json$ package.json
          yarn install --mode=update-lockfile
          yarn npm publish --tag ""${{ steps.metadata.outputs.npm-tag }}"" --tolerate-republish

  prepare_docker_metadata:
    name: Prepare Docker metadata
    runs-on: ubuntu-latest
    needs:
      - setup
      - compile
      - eslint
      - stylelint
      - unit_tests
      - lint_dockerfiles
    if: |
      !failure() &&
      !cancelled() &&
      (!contains(inputs.checks, 'compile') || needs.compile.result == 'success') &&
      (!contains(inputs.checks, 'eslint') || needs.eslint.result == 'success') &&
      (!contains(inputs.checks, 'stylelint') || needs.stylelint.result == 'success') &&
      (!contains(inputs.checks, 'unit_tests') || needs.unit_tests.result == 'success') &&
      (!contains(inputs.checks, 'lint_dockerfiles') || needs.lint_dockerfiles.result == 'success')
    outputs:
      annotations: ${{ steps.metadata.outputs.annotations }}
      labels: ${{ steps.metadata.outputs.labels }}
      matrix-include: ${{ steps.runners.outputs.matrix-include }}
      runner-config: ${{ steps.runners.outputs.runner-config }}
      tags: ${{ steps.metadata.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine platforms to build
        id: platforms
        shell: bash
        run: |
          if [[ "${{ needs.setup.outputs.is-release }}" == "true" ]]; then
            PLATFORMS="linux/amd64"
          else
            PLATFORMS=${{ inputs.platforms }}
          fi
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
      - name: Prepare github runners
        id: runners
        uses: equisoft-actions/docker-runners@v1
        with:
          instance-size: ${{ inputs.instance-size }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          use-self-hosted: ${{ inputs.use-self-hosted }}

      - name: Prepare image data
        id: metadata
        uses: equisoft-actions/docker-metadata@v1
        with:
          title: ${{ needs.setup.outputs.image-name }}
          image-name: ${{ inputs.registry }}/${{ needs.setup.outputs.image-name }}
          release: ${{ needs.setup.outputs.is-release }}
          version: ${{ needs.setup.outputs.version }}

  docker-build-push:
    name: Build image
    runs-on: ${{ fromJSON(format(needs.prepare_docker_metadata.outputs.runner-config, matrix.arch)) }}
    needs:
      - setup
      - prepare_docker_metadata
      - compile
      - eslint
      - stylelint
      - unit_tests
      - lint_dockerfiles
    if: |
      needs.setup.outputs.publishable == 'true' &&
      !failure() &&
      !cancelled() &&
      (!contains(inputs.checks, 'compile') || needs.compile.result == 'success') &&
      (!contains(inputs.checks, 'eslint') || needs.eslint.result == 'success') &&
      (!contains(inputs.checks, 'stylelint') || needs.stylelint.result == 'success') &&
      (!contains(inputs.checks, 'unit_tests') || needs.unit_tests.result == 'success') &&
      (!contains(inputs.checks, 'lint_dockerfiles') || needs.lint_dockerfiles.result == 'success')
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.prepare_docker_metadata.outputs.matrix-include) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download webapp build output
        uses: actions/download-artifact@v4
        with:
          name: webapp-dist
          path: ${{ inputs.working-directory }}/${{ inputs.build-path }}

      - name: Build and push ${{ matrix.platform }}
        id: build
        uses: equisoft-actions/docker-build-and-push@v3
        with:
            annotations: ${{ needs.prepare_docker_metadata.outputs.annotations }}
            aws-region: ${{ secrets.ECR_AWS_REGION }}
            build-args: |
              APPLICATION_VERSION=${{ needs.setup.outputs.version }}
              GPR_USER=${{ secrets.GPR_USER }}
              GPR_KEY=${{ secrets.GPR_KEY }}
            context: ${{ needs.setup.outputs.docker-context }}
            labels: ${{ needs.prepare_docker_metadata.outputs.labels }}
            name: ${{ needs.setup.outputs.image-name }}
            platforms: ${{ matrix.platform }}
            pull: ${{ inputs.pull }}
            push: ${{ inputs.publish-image }}
            push-manifest: "false"
            registry: ${{ inputs.registry }}
            role-to-assume: ${{ inputs.role-to-assume }}
            tags: ${{ needs.prepare_docker_metadata.outputs.tags }}
            working-directory: ${{ inputs.working-directory }}

  create-manifest:
    name: Create manifest
    runs-on: ubuntu-latest
    needs:
      - setup
      - prepare_docker_metadata
      - docker-build-push
    if: |
      needs.setup.outputs.publishable == 'true' &&
      inputs.publish-image &&
      !failure() &&
      !cancelled()
    outputs:
      image-id: ${{ steps.create.outputs.image-id }}
      image-version: ${{ steps.create.outputs.image-version }}
    steps:
      - name: Create manifest
        id: create
        uses: equisoft-actions/create-manifest@v1
        with:
          registry: ${{ inputs.registry }}
          name: ${{ needs.setup.outputs.image-name }}
          tags: ${{ needs.prepare_docker_metadata.outputs.tags }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ github.run_id }}

  docker-security:
    uses: equisoft-actions/docker-workflows/.github/workflows/security.yml@v2
    if: |
      !failure() &&
      !cancelled() &&
      needs.docker-build-push.result == 'success' &&
      inputs.publish-image
    needs:
      - docker-build-push
      - create-manifest
    with:
      image-tag: ${{ inputs.name }}:${{ needs.create-manifest.outputs.image-version }}
      role-to-assume: ${{ inputs.role-to-assume }}
      role-session-name: "js-docker-security-${{ github.run_id }}"
      working-directory: ${{ inputs.working-directory }}
    secrets:
      REGISTRY: ${{ inputs.registry }}
      ECR_AWS_REGION: ${{ secrets.ECR_AWS_REGION }}

  workflow-status:
    name: Workflow status
    runs-on: ubuntu-latest
    needs:
      - pre_checks
      - setup
      - eslint
      - stylelint
      - unit_tests
      - compile
      - lint_dockerfiles
      - publish_mf_types
      - create-manifest
      - docker-security
    if: always()
    steps:
      - name: Post workflow status
        uses: equisoft-actions/notify-workflow-status@v2
        with:
          needs: ${{ toJSON(needs) }}
          downgrade-to-warning: docker-security
          slack-enabled: ${{ needs.setup.outputs.publishable }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}

          slack-channel: ${{ inputs.slack-channel || github.event.repository.custom_properties.ci_slack_channel }}
